# Unreleased lints are commented out in this file to avoid warnings.

include: package:extra_pedantic/analysis_options.yaml
analyzer:
  errors:
    # error
    always_declare_return_types: error
    avoid_dynamic_calls: error
    avoid_equals_and_hash_code_on_mutable_classes: error
    avoid_shadowing_type_parameters: error
    avoid_type_to_string: error
    avoid_types_as_parameter_names: error
    avoid_web_libraries_in_flutter: error
    await_only_futures: error
    body_might_complete_normally: error
    body_might_complete_normally_catch_error: error
    body_might_complete_normally_nullable: error
    collection_methods_unrelated_type: error
    discarded_futures: error
    exhaustive_cases: error
    hash_and_equals: error
    implementation_imports: error
    implicit_reopen: error
    invalid_case_patterns: error
    invalid_non_virtual_annotation: error
    invalid_override_of_non_virtual_member: error
    invalid_use_of_protected_member: error
    iterable_contains_unrelated_type: error
    inference_failure_on_function_invocation: error
    inference_failure_on_function_return_type: error 
    inference_failure_on_collection_literal: error
    inference_failure_on_generic_invocation: error
    inference_failure_on_instance_creation: error
    inference_failure_on_uninitialized_variable: error 
    inference_failure_on_untyped_parameter: error
    list_remove_unrelated_type: error
    must_be_immutable: error
    must_call_super: error
    no_duplicate_case_values: error
    # no_self_assignments: error
    # no_wildcard_parameter_uses: error
    null_closures: error
    only_throw_errors: error
    recursive_getters: error
    strict_raw_type: error
    test_types_in_equals: error
    type_literal_in_constant_pattern: error
    unawaited_futures: error
    unrelated_type_equality_checks: error
    use_build_context_synchronously: error
    valid_regexps: error

    # warning
    avoid_implementing_value_types: warning
    avoid_js_rounded_ints: warning
    avoid_positional_boolean_parameters: warning
    avoid_slow_async_io: warning
    cancel_subscriptions: warning
    close_sinks: warning
    
    prefer_typing_uninitialized_variables: warning
    type_annotate_public_apis: warning

    # ignore
    invalid_annotation_target: ignore # required by freezed
    todo: ignore

  language: 
    strict-casts: true      
    strict-inference: true  
    strict-raw-types: true 

linter:
  rules:
    avoid_relative_lib_imports: true # Makes imports more explicit.
    deprecated_member_use_from_same_package: true # Avoid using deprecated code.
    implicit_reopen: true # Avoids accidentally reopening a class, potentially violating invariants.
    invalid_case_patterns: true # Avoids unintended behavior due to syntax ambiguity.
    # no_self_assignments: true # Avoids unintended behavior due to naming ambiguity.
    # no_wildcard_variable_uses: true # Pretend Dart acts like other languages with pattern matching.
    depend_on_referenced_packages: true # Avoids version issues due to dependencies not being tracked in pubspec.yaml.
    avoid_equals_and_hash_code_on_mutable_classes: true # While unreliable because this relies on an annotation, it can help avoid bugs in properly annotated code.
    avoid_positional_boolean_parameters: true # Avoids unintended behavior due to naming ambiguity.
    camel_case_extensions: true # Recommended style.
    camel_case_types: true # Recommended style.
    dangling_library_doc_comments: true # Makes documentation target explicit.
    deprecated_consistency: true # Makes deprecation more consistent and explicit.
    library_annotations: true # Makes annotation target explicit.
    matching_super_parameters: true # Avoids unintended behavior due to naming ambiguity.
    no_leading_underscores_for_local_identifiers: true # Recommended style.
    no_literal_bool_comparisons: true # Less verbose.
    non_constant_identifier_names: true # Recommended style.
    prefer_const_literals_to_create_immutables: true # Better performance.
    prefer_expression_function_bodies: false # False positives with comments. Too pedantic
    prefer_if_elements_to_conditional_expressions: true # Less verbose.
    prefer_interpolation_to_compose_strings: true # Less verbose.
    prefer_is_not_operator: true # Less verbose.
    prefer_single_quotes: true # Less verbose, maintains consistency.
    require_trailing_commas: true # Maintains formatting consistency.
    sort_child_properties_last: true # Recommended, Maintains formatting consistency.
    sort_unnamed_constructors_first: false # Too pedantic.
    type_literal_in_constant_pattern: true # Avoids unintended behavior due to syntax ambiguity.
    unnecessary_breaks: True # Less verbose.
    unnecessary_null_aware_operator_on_extension_on_nullable: true # Avoids unintended behavior.
    unnecessary_to_list_in_spreads: true # Less verbose.
    use_if_null_to_convert_nulls_to_bools: true # Less verbose, easier to reason about correctly.
    use_setters_to_change_properties: true # Less verbose.
    use_string_in_part_of_directives: true # Maintain style consistency with imports and exports.
    use_super_parameters: true # Less verbose.
    use_to_and_as_if_applicable: true # Makes intent explicit.




















